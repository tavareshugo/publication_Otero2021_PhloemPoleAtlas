configfile: "workflow/config.yaml"

#### Sample sheet ####
import pandas as pd

sample_info = pd.read_csv(config["sample_sheet"], dtype=str).set_index(["sample"], drop = False)


#### Rules ####

rule all:
  input:
    # SingleCellExperiment object
    expand("data/processed/SingleCellExperiment/{combo}_batches_strictfilt.rds", combo = config["combine"]),
    #expand("data/processed/SingleCellExperiment/{combo}_batches_{filt}.rds", combo = config["combine"], filt = config["filters"]),
    # expand("data/intermediate/velocyto/{sample}.loom", sample = sample_info["sample"]),
    #"data/intermediate/expression_network/ring_hardfilt_network.rds",

    # slingshot outputs
    "data/processed/trajectories/ring_batches_strictfilt_slingshot.rds",
    "data/processed/trajectories/ring_batches_strictfilt_tradeseq.rds",
    "data/processed/trajectories/ring_batches_strictfilt_gams.rds"
    

### fetch reference annotation

rule getReference:
  input:
    gfp_fasta="data/raw/GFP/GFP.fa",
    gfp_gff3="data/raw/GFP/GFP.gff3"
  output:
    idx=directory("data/external/reference/cellranger_index"),
    gtf="data/external/reference/annotation.gtf"
  params:
    runtime = "02:00:00"
  log:
    "logs/getReference/getReference.log"
  conda:
    "envs/getReference.yaml"
  threads: 1
  shell:
    "bash workflow/scripts/getReference.sh 45 {threads} data/external/reference/"


### fetch public data

rule getPublicData:
  output:
    directory("data/external/denyer2019/rep1/sample_ara_col_2367_MissingLibrary_1_HFHN2BGX7"), 
    directory("data/external/denyer2019/rep1/sample_ara_col_2367_MissingLibrary_1_HNV5MAFXX"),
    directory("data/external/denyer2019/rep2/sample_ara_MIR166_2360_MissingLibrary_1_HFHN2BGX7"),
    directory("data/external/denyer2019/rep2/sample_ara_MIR166_2360_MissingLibrary_1_HNV5MAFXX")
  log:
    "logs/getPublicData/getPublicData.log"
  threads: 4
  params:
    runtime = "03:00:00"
  shell:
    "bash workflow/scripts/getPublicData.sh"


### cellranger

rule cellranger:
  input:
    fq = lambda wildcards: sample_info.loc[wildcards.sample, "fastqs"].split(","),
    idx="data/external/reference/cellranger_index"
  output:
    directory("data/intermediate/counts_cellranger/{sample}")
  params:
    cells = lambda wildcards: sample_info.loc[wildcards.sample, "cells"],
    fq = lambda wildcards: sample_info.loc[wildcards.sample, "fastqs"],
    runtime = "36:00:00"
  log:
    "logs/cellranger/{sample}.log"
  threads: 12
  # run:
  #   fqs = ",".join(input.fq)
  #   shell(
  #     "(cellranger count "
  #     "--id={wildcards.sample} "
  #     "--transcriptome={input.idx} "
  #     "--fastqs={fqs} "
  #     "--expect-cells={params.cells} "
  #     "--localcores={threads} "
  #     "--localmem=50 "
  #     "; mv {wildcards.sample} {output}) "
  #     "> {log} 2>&1"
  #   )
  shell:"""
    (cellranger count \
    --id={wildcards.sample} \
    --transcriptome={input.idx} \
    --fastqs={params.fq} \
    --expect-cells={params.cells} \
    --localcores={threads} \
    --localmem=50 \
    ; mv {wildcards.sample} {output}) \
    > {log} 2>&1
    """


### SingleCellExperiment

# process each sample individually
rule SingleCellExperiment:
  input:
    # get_cellranger
    # expand("data/intermediate/counts_cellranger/{id}", id = sample_info["sample"])
    "data/intermediate/counts_cellranger/{sample}"
    # expand("data/intermediate/counts_cellranger/{{sample}}")
  output:
    # "data/processed/sce.rds"
    # directory("data/processed/SingleCellExperiment/{sample}")
    rds = "data/intermediate/SingleCellExperiment/{sample}/{sample}_sce.rds",
    qc = "data/intermediate/SingleCellExperiment/{sample}/{sample}_qc.pdf"
  params:
    runtime = "05:00:00"
  log:
    "logs/SingleCellExperiment/{sample}.log"
  conda:
    "envs/SingleCellExperiment.yaml"
  threads: 32
  shell:
    "Rscript --vanilla workflow/scripts/makeSingleCellExperiment.R "
    "--cellranger {input} "
    "--sample {wildcards.sample} "
    "--outdir $(dirname {output.rds}) "
    "--fdr 0.001 "
    "--cores {threads} "
    "> {log} 2>&1"


# function to fetch relevant single cell experiment files
def getSCE(wildcards):
  return(expand("data/intermediate/SingleCellExperiment/{sample}/{sample}_sce.rds", sample = config["combine"][wildcards.combo]))

# combine and batch-normalise all the samples
rule combineSingleCellExperiment:
  input:
    # getSCE
    lambda wildcards: expand("data/intermediate/SingleCellExperiment/{sample}/{sample}_sce.rds", sample = config["combine"][wildcards.combo])
  output:
    "data/processed/SingleCellExperiment/{combo}_batches_{filt}.rds"
    # "data/processed/SingleCellExperiment/{files}_batches_{filt}.rds"
    # "data/processed/SingleCellExperiment/all_batches.rds",
    # "data/processed/SingleCellExperiment/ring_batches.rds"
    # "data/processed/SingleCellExperiment/all_batches_mnn.rds",
    # "data/processed/SingleCellExperiment/ring_batches_mnn.rds"
  params:
    filters = lambda wildcards: config["filters"][wildcards.filt],
    runtime = "07:00:00"
  log:
    "logs/SingleCellExperiment/combineSingleCellExperiment_{combo}_{filt}.log"
  conda:
    "envs/SingleCellExperiment.yaml"
  threads: 32
  shell:
    "Rscript --vanilla workflow/scripts/combineSingleCellExperiment.R {params.filters} --cores {threads} --out {output} {input} > {log} 2>&1"


# combine and batch-normalise all the samples
rule combineSingleCellExperiment2:
  input:
    # getSCE
    lambda wildcards: expand("data/processed/SingleCellExperiment/{sample}/{sample}_sce.rds", sample = config["combine"][wildcards.combo])
  output:
    "data/processed/SingleCellExperimentGLM/{combo}_batches_{filt}.rds"
    # "data/processed/SingleCellExperiment/{files}_batches_{filt}.rds"
    # "data/processed/SingleCellExperiment/all_batches.rds",
    # "data/processed/SingleCellExperiment/ring_batches.rds"
    # "data/processed/SingleCellExperiment/all_batches_mnn.rds",
    # "data/processed/SingleCellExperiment/ring_batches_mnn.rds"
  params:
    filters = lambda wildcards: config["filters"][wildcards.filt],
    runtime = "12:00:00"
  log:
    "logs/SingleCellExperimentGLM/combineSingleCellExperiment_{combo}_{filt}.log"
  conda:
    "envs/SingleCellExperiment.yaml"
  threads: 32
  shell:
    "Rscript --vanilla workflow/scripts/combineSingleCellExperimentGLM.R {params.filters} --cores {threads} --out {output} {input} > {log} 2>&1"

#### RNA velocity

rule velocyto:
  input:
    cellranger="data/intermediate/counts_cellranger/{sample}",
    gtf="data/external/reference/annotation.gtf"
  output:
    "data/intermediate/velocyto/{sample}.loom"
  params:
    runtime = "07:00:00"
  log:
    "logs/velocyto/velocyto_{sample}.log"
  conda:
    "envs/velocyto.yaml"
  threads: 32
  shell:
    "(velocyto run10x {input.cellranger} {input.gtf}"
    "; mv data/intermediate/counts_cellranger/{wildcards.sample}/velocyto/{wildcards.sample}.loom {output}) "
    "> {log} 2>&1"


#### Expression Network 

rule expressionNetwork:
  input:
    "data/processed/SingleCellExperiment/ring_batches_hardfilt.rds"
  output:
    "data/intermediate/expression_network/ring_hardfilt_network.rds"
  params:
    runtime = "07:00:00"
  log:
    "logs/bigSCale/expressionNetwork.log"
  conda:
    "envs/bigSCale.yaml"
  threads: 8
  shell:
    "Rscript --vanilla workflow/scripts/expressionNetwork.R > {log} 2>&1"


#### Slingshot trajectories

rule slingshotTrajectories:
  input:
    "data/processed/SingleCellExperiment/ring_batches_strictfilt.rds"
  output:
    "data/processed/trajectories/ring_batches_strictfilt_slingshot.rds",
    "data/processed/trajectories/ring_batches_strictfilt_tradeseq.rds",
    "data/processed/trajectories/ring_batches_strictfilt_gams.rds"
  params:
    runtime = "36:00:00"
  log:
    "logs/slingshot/slingshotTrajectories.log"
  conda:
    "envs/SingleCellExperiment.yaml"
  threads: 24
  shell:
    "Rscript --vanilla workflow/scripts/fitSlingshotTrajectories.R {input} > {log} 2>&1"

